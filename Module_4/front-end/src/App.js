import React, { useState } from "react";
import './App.css';

var Web3 = require("web3");
var web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));

var abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256"
      }
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256"
      }
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "tokenName",
        type: "string"
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "spender",
        type: "address"
      }
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

let bin =
  "";

export default function App() {
  const [show_balance, set_balance] = useState(0);
  const [show_address, set_address] = useState(0);
  const [show_name, set_name] = useState(0);
  const [show_symbol, set_symbol] = useState(0);
  const [show_supply, set_supply] = useState(0);

  const handleNameChange = (e) => {
    set_name(e.target.value);
  };

  const handleSymbolChange = (e) => {
    set_symbol(e.target.value);
  };

  const handleSupplyChange = (e) => {
    set_supply(e.target.value);
  };

  function getBalance() {
    console.log("Checking  balance");
    web3.eth
      .getBalance("0x4faF226eA0437A14ae882Fc05Df2439029312E3E")
      .then((balance) => {
        console.log(
          "Account 0x4faF226eA0437A14ae882Fc05Df2439029312E3E balance",
          balance
        );
        set_balance(Web3.utils.fromWei(balance, "ether"));
      });
  }

  async function deploySimpleContract() {
    let contract = new web3.eth.Contract(abi);
    let transaction = contract.deploy({
      data: "0x" + bin,
      arguments: [show_supply, show_name, show_symbol]
    });
    let gas = await transaction.estimateGas({
      from: "0xA31c2434062757563A6E27379dDD512F827e8795"
    });
    let options = {
      to: transaction._parent._address,
      data: transaction.encodeABI(),
      gas: gas
    };
    let signedTransaction = await web3.eth.accounts.signTransaction(
      options,
      "PRIVATE_KEY"
    );
    let receipt = await web3.eth.sendSignedTransaction(
      signedTransaction.rawTransaction
    );
    set_address(receipt.contractAddress);
  }

  return (
    <div className="App">
      <h1>ERC20 Token Smart Contract</h1>
      <div>
        <button onClick={getBalance}>Check balance</button>
        <h4>{show_balance}</h4>
      </div>
      <div>
        <input
          placeholder="enter name"
          onChange={(e) => handleNameChange(e)}
        ></input>
        <br />
        <input
          placeholder="enter symbol"
          onChange={(e) => handleSymbolChange(e)}
        ></input>
        <br />
        <input
          placeholder="enter supply"
          onChange={(e) => handleSupplyChange(e)}
        ></input>
        <br />
        <button onClick={deploySimpleContract}>Deploy ERC20</button>
        <h4>{show_address}</h4>
      </div>
    </div>
  );
}
